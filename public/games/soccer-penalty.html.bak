<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Soccer Penalty Shootout - ASHURA Games</title>
    <link rel="stylesheet" href="game-optimization.css">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #2d5a27, #4a7c59);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }

        #gameContainer {
            text-align: center;
            padding: 20px;
            max-width: 100vw;
            max-height: 100vh;
        }

        h1 {
            color: #ffffff;
            margin-bottom: 10px;
            font-size: clamp(1.5rem, 4vw, 2.5rem);
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
        }

        #gameInfo {
            color: #ffffff;
            margin-bottom: 15px;
            font-size: clamp(0.8rem, 2vw, 1rem);
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            background: rgba(0, 0, 0, 0.3);
            padding: 10px;
            border-radius: 10px;
        }

        #gameCanvas {
            border: 3px solid #ffffff;
            border-radius: 10px;
            background: linear-gradient(180deg, #87CEEB 0%, #228B22 70%);
            box-shadow: 0 0 30px rgba(255, 255, 255, 0.4);
            display: block;
            margin: 0 auto;
            max-width: calc(100vw - 40px);
            max-height: calc(100vh - 200px);
            cursor: crosshair;
        }

        #instructions {
            color: #ffffff;
            margin-top: 10px;
            font-size: clamp(0.7rem, 1.5vw, 0.9rem);
            background: rgba(0, 0, 0, 0.3);
            padding: 8px;
            border-radius: 8px;
        }

        #gameOver {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            color: #ffffff;
            text-align: center;
            z-index: 1000;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        #gameOver h2 {
            font-size: 3rem;
            margin-bottom: 20px;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
            animation: pulse 2s infinite;
        }

        .btn {
            background: linear-gradient(135deg, #00ff00, #228B22);
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            color: #000;
            font-weight: bold;
            cursor: pointer;
            margin: 10px;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 255, 0, 0.2);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 255, 0, 0.4);
        }

        #powerMeter {
            width: 200px;
            height: 20px;
            background: rgba(255, 255, 255, 0.3);
            border: 2px solid #fff;
            border-radius: 10px;
            margin: 10px auto;
            position: relative;
            overflow: hidden;
        }

        #powerBar {
            height: 100%;
            background: linear-gradient(90deg, #00ff00, #ffff00, #ff0000);
            width: 0%;
            border-radius: 8px;
            transition: width 0.1s ease;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.05); opacity: 0.8; }
        }

        @media (max-width: 768px) {
            #gameContainer {
                padding: 10px;
            }

            #gameCanvas {
                max-height: calc(100vh - 280px);
            }
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <h1>‚öΩ Soccer Penalty Shootout</h1>
        <div id="gameInfo">
            <span>ü•Ö ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: <span id="goals">0</span></span>
            <span>‚ùå ‡∏û‡∏•‡∏≤‡∏î: <span id="misses">0</span></span>
            <span>üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: <span id="score">0</span></span>
            <span>üî¢ ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà: <span id="currentShot">1</span>/10</span>
        </div>

        <div id="powerMeter">
            <div id="powerBar"></div>
        </div>

        <canvas id="gameCanvas" width="800" height="500"></canvas>

        <div id="instructions">
            üéØ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á | ‚è∞ ‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á | ü•Ö ‡∏¢‡∏¥‡∏á 10 ‡∏•‡∏π‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!
        </div>
    </div>

    <div id="gameOver">
        <h2 id="gameOverTitle">‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!</h2>
        <p>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡πÑ‡∏î‡πâ: <span id="finalGoals">0</span>/10</p>
        <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: <span id="finalScore">0</span></p>
        <p id="rating"></p>
        <button class="btn" onclick="restartGame()">‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà</button>
    </div>

    <script src="game-optimization.js"></script>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Game variables
        let goals = 0;
        let misses = 0;
        let score = 0;
        let currentShot = 1;
        let maxShots = 10;
        let gameRunning = true;
        let difficulty = 'normal';
        let level = 1; // Placeholder for level, can be used for difficulty scaling

        let goalkeeperAI = {
            reflexSpeed: 0.7,
            reactionTime: 150,
            accuracy: 0.6
        };

        // Shooting variables
        let isAiming = false;
        let power = 0;
        let powerIncreasing = true;
        let aimX = 0;
        let aimY = 0;
        let powerInterval;

        // Ball variables
        let ball = {
            x: canvas.width / 2,
            y: canvas.height - 50,
            radius: 15,
            speedX: 0,
            speedY: 0,
            isMoving: false,
            trail: []
        };
        let ballAnimating = false;

        // Goal variables
        let goal = { x: 200, y: 50, width: 400, height: 200 };
        let goalkeeper = { x: 350, y: 200, width: 100, height: 80, speed: 5 }; // Added speed property

        // Responsive canvas sizing
        function resizeCanvas() {
            const maxWidth = Math.min(800, window.innerWidth - 40);
            const maxHeight = Math.min(500, window.innerHeight - 280);

            // Keep aspect ratio
            const aspectRatio = 800 / 500;
            let newWidth, newHeight;

            if (maxWidth / maxHeight > aspectRatio) {
                newHeight = maxHeight;
                newWidth = newHeight * aspectRatio;
            } else {
                newWidth = maxWidth;
                newHeight = newWidth / aspectRatio;
            }

            canvas.width = newWidth;
            canvas.height = newHeight;
            canvas.style.width = newWidth + 'px';
            canvas.style.height = newHeight + 'px';

            // Scale game objects
            const scaleX = newWidth / 800;
            const scaleY = newHeight / 500;

            ball.x = 400 * scaleX;
            ball.y = 450 * scaleY;
            ball.radius = 15 * Math.min(scaleX, scaleY);

            goal.x = 200 * scaleX;
            goal.y = 50 * scaleY;
            goal.width = 400 * scaleX;
            goal.height = 200 * scaleY;

            goalkeeper.x = 350 * scaleX;
            goalkeeper.y = 200 * scaleY;
            goalkeeper.width = 100 * scaleX;
            goalkeeper.height = 80 * scaleY;
            goalkeeper.speed = 5 * Math.min(scaleX, scaleY); // Scale speed too
        }

        // Draw functions
        function drawField() {
            // Sky
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#87CEEB');
            gradient.addColorStop(0.7, '#228B22');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Penalty area
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 3;
            ctx.strokeRect(goal.x - 50, goal.y + goal.height, goal.width + 100, 100);

            // Penalty spot
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.arc(ball.x, ball.y + 50, 5, 0, 2 * Math.PI);
            ctx.fill();
        }

        function drawGoal() {
            // Goal frame
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 5;
            ctx.strokeRect(goal.x, goal.y, goal.width, goal.height);

            // Goal net
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
            ctx.lineWidth = 1;

            // Vertical lines
            for (let x = goal.x + 50; x < goal.x + goal.width; x += 50) {
                ctx.beginPath();
                ctx.moveTo(x, goal.y);
                ctx.lineTo(x, goal.y + goal.height);
                ctx.stroke();
            }

            // Horizontal lines
            for (let y = goal.y + 40; y < goal.y + goal.height; y += 40) {
                ctx.beginPath();
                ctx.moveTo(goal.x, y);
                ctx.lineTo(goal.x + goal.width, y);
                ctx.stroke();
            }
        }

        function drawGoalkeeper() {
            // Goalkeeper shadow
            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
            ctx.fillRect(goalkeeper.x + 5, goalkeeper.y + goalkeeper.height - 5, goalkeeper.width, 10);

            // Goalkeeper body
            ctx.fillStyle = '#ff6b35';
            ctx.fillRect(goalkeeper.x, goalkeeper.y, goalkeeper.width, goalkeeper.height);

            // Goalkeeper head
            ctx.fillStyle = '#ffdbac';
            ctx.fillRect(goalkeeper.x + 30, goalkeeper.y - 20, 40, 30);

            // Gloves
            ctx.fillStyle = '#ffff00';
            ctx.fillRect(goalkeeper.x - 10, goalkeeper.y + 20, 20, 20);
            ctx.fillRect(goalkeeper.x + goalkeeper.width - 10, goalkeeper.y + 20, 20, 20);
        }

        function drawBall() {
            // Draw ball trail
            ctx.globalAlpha = 0.5;
            for (let i = 0; i < ball.trail.length; i++) {
                const alpha = (i + 1) / ball.trail.length * 0.5;
                ctx.globalAlpha = alpha;
                ctx.beginPath();
                ctx.arc(ball.trail[i].x, ball.trail[i].y, ball.radius * 0.8, 0, Math.PI * 2);
                ctx.fillStyle = ball.color;
                ctx.fill();
                ctx.closePath();
            }
            ctx.globalAlpha = 1;

            // Draw main ball with glow
            ctx.save();
            ctx.shadowColor = '#FFFFFF';
            ctx.shadowBlur = 15;
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = ball.color;
            ctx.fill();

            // Draw ball pattern
            ctx.shadowBlur = 0;
            ctx.strokeStyle = '#000000';
            ctx.lineWidth = 2;
            ctx.stroke();

            // Draw soccer ball pattern
            ctx.strokeStyle = '#000';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(ball.x - ball.radius * 0.7, ball.y);
            ctx.lineTo(ball.x + ball.radius * 0.7, ball.y);
            ctx.moveTo(ball.x, ball.y - ball.radius * 0.7);
            ctx.lineTo(ball.x, ball.y + ball.radius * 0.7);
            ctx.stroke();
            ctx.restore();
        }

        function drawAimLine() {
            if (!isAiming) return;

            ctx.strokeStyle = `rgba(255, 255, 0, ${0.5 + power * 0.01})`;
            ctx.lineWidth = 3;
            ctx.setLineDash([10, 5]);

            ctx.beginPath();
            ctx.moveTo(ball.x, ball.y);
            ctx.lineTo(aimX, aimY);
            ctx.stroke();

            ctx.setLineDash([]);

            // Target circle
            ctx.strokeStyle = `rgba(255, 0, 0, ${0.5 + power * 0.01})`;
            ctx.beginPath();
            ctx.arc(aimX, aimY, 20 + power * 0.5, 0, 2 * Math.PI);
            ctx.stroke();
        }

        // Game logic
        function updatePowerMeter() {
            const powerBar = document.getElementById('powerBar');
            powerBar.style.width = power + '%';
        }

        function animatePower() {
            if (powerIncreasing) {
                power += 2;
                if (power >= 100) {
                    powerIncreasing = false;
                }
            } else {
                power -= 2;
                if (power <= 0) {
                    powerIncreasing = true;
                }
            }
            updatePowerMeter();
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏¥‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•
        function shootBall(targetX, targetY) {
            if (gameState !== 'shooting') return;

            gameState = 'flying';
            ball.targetX = targetX;
            ball.targetY = targetY;

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏£‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
            const distance = Math.sqrt((targetX - ball.x) ** 2 + (targetY - ball.y) ** 2);
            const speed = Math.max(0.8, Math.min(1.5, distance / 400));

            ball.vx = (targetX - ball.x) / 60 * speed;
            ball.vy = (targetY - ball.y) / 60 * speed;

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            if (window.GameEnhancement && window.GameEnhancement.audio) {
                const kickSound = window.GameEnhancement.audio.createSound(220, 0.1);
                kickSound();
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏û‡∏≤‡∏£‡πå‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏¥‡∏•
            if (window.GameEnhancement && window.GameEnhancement.createParticleSystem) {
                const particles = window.GameEnhancement.createParticleSystem();
                for (let i = 0; i < 10; i++) {
                    particles.add(ball.x, ball.y, {
                        vx: (Math.random() - 0.5) * 4,
                        vy: (Math.random() - 0.5) * 4,
                        color: '#ffffff',
                        life: 0.5
                    });
                }
            }
            ball.isMoving = true;
        }

        function checkGoalkeeperSave(ball, targetX, targetY, shotPower) {
            const distance = Math.sqrt((targetX - (goalkeeper.x + goalkeeper.width / 2)) ** 2 +
                                     (targetY - (goalkeeper.y + goalkeeper.height / 2)) ** 2);

            // AI difficulty adjustment
            let saveChance = goalkeeperAI.accuracy;

            // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π
            if (distance < 50) saveChance += 0.3;
            else if (distance < 100) saveChance += 0.1;
            else if (distance > 200) saveChance -= 0.2;

            // ‡∏û‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á
            if (shotPower > 80) saveChance -= 0.15;
            else if (shotPower < 30) saveChance += 0.1;

            // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•
            if (targetY < goal.y + goal.height * 0.3) saveChance -= 0.1; // ‡∏¢‡∏¥‡∏á‡∏™‡∏π‡∏á

            return Math.random() < saveChance;
        }

        function animateGoalkeeperSave(targetX) {
            const centerX = goalkeeper.x + goalkeeper.width / 2;
            const direction = targetX > centerX ? 1 : -1;

            // Animation goalkeeper dive
            const originalX = goalkeeper.x;
            const moveDistance = 60 * direction;

            let animationFrame = 0;
            const animationDuration = 20;

            const saveAnimation = setInterval(() => {
                animationFrame++;
                const progress = animationFrame / animationDuration;

                if (progress <= 1) {
                    goalkeeper.x = originalX + (moveDistance * progress);
                } else {
                    clearInterval(saveAnimation);
                    // ‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
                    setTimeout(() => {
                        goalkeeper.x = originalX;
                    }, 500);
                }
            }, 16);
        }

        function adjustDifficulty(newDifficulty) {
            difficulty = newDifficulty;

            switch(difficulty) {
                case 'easy':
                    goalkeeperAI.accuracy = 0.3;
                    goalkeeperAI.reflexSpeed = 0.5;
                    break;
                case 'normal':
                    goalkeeperAI.accuracy = 0.6;
                    goalkeeperAI.reflexSpeed = 0.7;
                    break;
                case 'hard':
                    goalkeeperAI.accuracy = 0.8;
                    goalkeeperAI.reflexSpeed = 0.9;
                    break;
            }
        }

        function nextShot() {
            currentShot++;
            updateScore();

            if (currentShot > maxShots) {
                endGame();
                return;
            }

            // Reset ball position
            ball.x = canvas.width / 2;
            ball.y = canvas.height * 0.9;
            ball.vx = 0;
            ball.vy = 0;
            ballAnimating = false;
            isAiming = false; // Reset aiming state
            power = 0;
            ball.trail = []; // Clear trail for the next shot
            updatePowerMeter();

            // Smart goalkeeper positioning
            const smartPositions = [
                goal.x + goal.width * 0.2,  // ‡∏ã‡πâ‡∏≤‡∏¢
                goal.x + goal.width * 0.5,  // ‡∏Å‡∏•‡∏≤‡∏á
                goal.x + goal.width * 0.8   // ‡∏Ç‡∏ß‡∏≤
            ];

            goalkeeper.x = smartPositions[Math.floor(Math.random() * smartPositions.length)];
        }

        function updateScore() {
            document.getElementById('goals').textContent = goals;
            document.getElementById('misses').textContent = misses;
            document.getElementById('score').textContent = score;
            document.getElementById('currentShot').textContent = currentShot;
        }

        function endGame() {
            gameRunning = false;

            document.getElementById('finalGoals').textContent = goals;
            document.getElementById('finalScore').textContent = score;

            let rating = '';
            if (goals >= 9) rating = 'üèÜ ‡πÅ‡∏ä‡∏°‡∏õ‡πå‡πÇ‡∏•‡∏Å!';
            else if (goals >= 7) rating = '‚≠ê ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!';
            else if (goals >= 5) rating = 'üëç ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!';
            else if (goals >= 3) rating = 'üòä ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏ß!';
            else rating = 'üòÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞!';

            document.getElementById('rating').textContent = rating;
            document.getElementById('gameOver').style.display = 'flex';
        }

        function restartGame() {
            goals = 0;
            misses = 0;
            score = 0;
            currentShot = 1;
            gameRunning = true;
            ballAnimating = false;
            isAiming = false;
            power = 0;
            ball.trail = [];

            ball.x = canvas.width / 2;
            ball.y = canvas.height * 0.9;
            ball.vx = 0;
            ball.vy = 0;

            updateScore();
            updatePowerMeter();
            document.getElementById('gameOver').style.display = 'none';
        }

        function gameLoop() {
            if (!gameRunning) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            drawField();
            drawGoal();
            drawGoalkeeper();
            drawBall();
            drawAimLine();

            // Update ball position and check for goal/miss
            if (ball.isMoving) {
                ball.x += ball.vx;
                ball.y += ball.vy;
                ball.trail.push({x: ball.x, y: ball.y});
                if (ball.trail.length > 10) {
                    ball.trail.shift();
                }

                // Apply gravity and drag (simple physics)
                ball.vy += 0.1; // Gravity
                ball.vx *= 0.99; // Drag

                // Check if ball is out of bounds or hit something
                if (ball.y > canvas.height + ball.radius || ball.x < -ball.radius || ball.x > canvas.width + ball.radius) {
                    ball.isMoving = false;
                    ballAnimating = false;
                    if (ball.y > canvas.height - 50) { // Hit ground before goal line
                        misses++;
                        score -= 5; // Penalty for missing
                    }
                    nextShot();
                } else {
                    // Check for goal
                    if (ball.x >= goal.x && ball.x <= goal.x + goal.width &&
                        ball.y >= goal.y && ball.y <= goal.y + goal.height) {
                        if (checkGoalkeeperSave(ball, ball.targetX, ball.targetY, power)) {
                            // Goalkeeper saves
                            animateGoalkeeperSave(ball.targetX);
                            misses++;
                            score -= 10; // Penalty for save
                            ball.vx = -ball.vx * 0.5;
                            ball.vy = ball.vy * 0.5;
                            ball.color = '#ff0000'; // Indicate a save
                            setTimeout(() => { ball.color = '#FFFFFF'; }, 300);
                            ball.isMoving = false;
                            ballAnimating = false;
                            nextShot();
                        } else {
                            // Goal!
                            goals++;
                            score += 10;
                            ball.isMoving = false;
                            ballAnimating = false;
                            // Goal effect
                            if (window.GameEnhancement && window.GameEnhancement.createParticleSystem) {
                                const particles = window.GameEnhancement.createParticleSystem({ count: 50, spread: 15 });
                                particles.add(ball.x, ball.y, { color: '#FFFF00', life: 1 });
                            }
                            nextShot();
                        }
                    }
                }
            }

            // Update goalkeeper's position based on AI
            updateGoalkeeper();
        }

        // Event handlers
        function getMousePos(e) {
            const rect = canvas.getBoundingClientRect();
            const scaleX = canvas.width / rect.width;
            const scaleY = canvas.height / rect.height;

            return {
                x: (e.clientX - rect.left) * scaleX,
                y: (e.clientY - rect.top) * scaleY
            };
        }

        // Placeholder for gameState, needed for shootBall
        let gameState = 'shooting';

        canvas.addEventListener('mousedown', (e) => {
            if (!gameRunning || ballAnimating) return;

            const pos = getMousePos(e);
            aimX = pos.x;
            aimY = pos.y;
            isAiming = true;
            power = 0;

            powerInterval = setInterval(animatePower, 50);
        });

        canvas.addEventListener('mousemove', (e) => {
            if (!isAiming) return;

            const pos = getMousePos(e);
            aimX = pos.x;
            aimY = pos.y;
        });

        canvas.addEventListener('mouseup', () => {
            if (isAiming) {
                clearInterval(powerInterval);
                shootBall(aimX, aimY);
                isAiming = false;
            }
        });

        // Touch events
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            const mouseEvent = new MouseEvent('mousedown', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(mouseEvent);
        });

        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(mouseEvent);
        });

        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            const touch = e.changedTouches[0];
            const mouseEvent = new MouseEvent('mouseup', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(mouseEvent);
        });

        // Initialize game
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        updateScore();
        setInterval(gameLoop, 16);

        // Focus canvas
        canvas.focus();

        // Updated Goalkeeper function
        function updateGoalkeeper() {
            if (ball.isMoving) {
                // Smarter goalkeeper AI
                let reactionTime = 0.7 - (level - 1) * 0.1; // Adjust reaction time based on level
                if (Math.random() < reactionTime) {
                    // Predict ball's trajectory for better anticipation
                    let predictedX = ball.x + ball.vx * 20; // Predict where the ball will be in ~20 frames
                    let targetX = Math.max(100, Math.min(canvas.width - 100, predictedX)); // Keep within bounds

                    if (Math.abs(goalkeeper.x - targetX) > 5) {
                        if (goalkeeper.x < targetX) {
                            goalkeeper.x += goalkeeper.speed;
                        } else {
                            goalkeeper.x -= goalkeeper.speed;
                        }
                    }
                }

                // Ensure goalkeeper stays within the goal area
                goalkeeper.x = Math.max(goal.x, Math.min(goal.x + goal.width - goalkeeper.width, goalkeeper.x));
            }
        }

        // New function to update ball trail
        function updateBallTrail() {
            if (ball.isMoving) {
                ball.trail.push({x: ball.x, y: ball.y});
                if (ball.trail.length > 10) {
                    ball.trail.shift();
                }
            }
        }
    </script>
</body>
</html>