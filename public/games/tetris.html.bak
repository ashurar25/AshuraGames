<!DOCTYPE html>
<html    lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>เททริส - ASHURA Games</title>
    <!-- ASHURA:shared-css -->
    <link rel="stylesheet" href="./game-enhancement.css">
    <link rel="stylesheet" href="./game-optimization.css">
    <link rel="stylesheet" href="./_assets/game-frame.css">

    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            font-family: 'Rajdhani', 'Arial', sans-serif;
            color: white;
            position: relative;
            overflow: hidden;
        }
        
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 30% 40%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 70% 80%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
            animation: backgroundShift 20s ease-in-out infinite;
            pointer-events: none;
            z-index: -1;
        }
        
        @keyframes backgroundShift {
            0%, 100% { opacity: 1; transform: scale(1) rotate(0deg); }
            50% { opacity: 0.7; transform: scale(1.1) rotate(0.5deg); }
        }
        
        .game-container {
            text-align: center;
            background: rgba(15, 23, 42, 0.8);
            border-radius: 20px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(16, 185, 129, 0.3);
        }
        
        canvas {
            border: 2px solid #10b981;
            border-radius: 10px;
            background: #0f172a;
            box-shadow: 0 0 20px rgba(16, 185, 129, 0.3);
        }
        
        .info {
            display: flex;
            justify-content: space-around;
            margin: 15px 0;
            font-size: 18px;
            color: #10b981;
            font-weight: bold;
        }
        
        .controls {
            margin: 15px 0;
            font-size: 14px;
            color: #94a3b8;
        }
        
        .game-over {
            font-size: 28px;
            color: #ef4444;
            margin: 15px 0;
            display: none;
        }
        
        .restart-btn {
            background: linear-gradient(135deg, #10b981, #059669);
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            color: white;
            font-size: 16px;
            cursor: pointer;
            margin: 10px;
            transition: all 0.3s;
        }
        
        .restart-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(16, 185, 129, 0.4);
        }
        
        .credit {
            position: fixed;
            bottom: 10px;
            right: 10px;
            font-size: 12px;
            color: #10b981;
            background: rgba(0, 0, 0, 0.5);
            padding: 5px 10px;
            border-radius: 15px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 style="color: #10b981; margin-bottom: 10px;">เททริส</h1>
        <div class="info">
            <div>คะแนน: <span id="score">0</span></div>
            <div>เส้น: <span id="lines">0</span></div>
            <div>ระดับ: <span id="level">1</span></div>
        </div>
        <canvas id="gameCanvas" width="300" height="600"></canvas>
        <div class="controls">
            ←→ เลื่อน, ↓ เร่ง, ↑ หมุน, Space หยุด
        </div>
        <div class="game-over" id="gameOver">
            เกมจบแล้ว!<br>
            <button class="restart-btn" onclick="startGame()">เล่นใหม่</button>
        </div>
    </div>
    
    <div class="credit">© ASHURA Games</div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const linesElement = document.getElementById('lines');
        const levelElement = document.getElementById('level');
        const gameOverElement = document.getElementById('gameOver');

        const BLOCK_SIZE = 30;
        const BOARD_WIDTH = 10;
        const BOARD_HEIGHT = 20;

        let board = [];
        let score = 0;
        let lines = 0;
        let level = 1;
        let gameRunning = false;
        let isPaused = false;
        let dropTime = 0;
        let dropInterval = 1000;

        const PIECES = [
            // I
            [[[1,1,1,1]]],
            // O
            [[[1,1],[1,1]]],
            // T
            [[[0,1,0],[1,1,1]], [[1,0],[1,1],[1,0]], [[1,1,1],[0,1,0]], [[0,1],[1,1],[0,1]]],
            // S
            [[[0,1,1],[1,1,0]], [[1,0],[1,1],[0,1]]],
            // Z
            [[[1,1,0],[0,1,1]], [[0,1],[1,1],[1,0]]],
            // J
            [[[1,0,0],[1,1,1]], [[1,1],[1,0],[1,0]], [[1,1,1],[0,0,1]], [[0,1],[0,1],[1,1]]],
            // L
            [[[0,0,1],[1,1,1]], [[1,0],[1,0],[1,1]], [[1,1,1],[1,0,0]], [[1,1],[0,1],[0,1]]]
        ];

        const COLORS = [
            '#00f0f0', // cyan
            '#f0f000', // yellow
            '#a000f0', // purple
            '#00f000', // green
            '#f00000', // red
            '#0000f0', // blue
            '#f0a000'  // orange
        ];

        let currentPiece = {
            x: 0,
            y: 0,
            rotation: 0,
            type: 0
        };

        function initBoard() {
            board = [];
            for (let y = 0; y < BOARD_HEIGHT; y++) {
                board[y] = [];
                for (let x = 0; x < BOARD_WIDTH; x++) {
                    board[y][x] = 0;
                }
            }
        }

        function drawBlock(x, y, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
            
            // เพิ่มเงา
            ctx.fillStyle = 'rgba(255,255,255,0.3)';
            ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, 3);
            ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, 3, BLOCK_SIZE - 1);
        }

        function drawBoard() {
            // ล้างหน้าจอ
            ctx.fillStyle = '#0f172a';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // วาดกระดาน
            for (let y = 0; y < BOARD_HEIGHT; y++) {
                for (let x = 0; x < BOARD_WIDTH; x++) {
                    if (board[y][x]) {
                        drawBlock(x, y, COLORS[board[y][x] - 1]);
                    }
                }
            }

            // วาดชิ้นปัจจุบัน
            if (gameRunning) {
                const piece = PIECES[currentPiece.type][currentPiece.rotation];
                for (let y = 0; y < piece.length; y++) {
                    for (let x = 0; x < piece[y].length; x++) {
                        if (piece[y][x]) {
                            const boardX = currentPiece.x + x;
                            const boardY = currentPiece.y + y;
                            if (boardX >= 0 && boardX < BOARD_WIDTH && boardY >= 0 && boardY < BOARD_HEIGHT) {
                                drawBlock(boardX, boardY, COLORS[currentPiece.type]);
                            }
                        }
                    }
                }
            }
        }

        function isValidPosition(piece, x, y, rotation) {
            const shape = PIECES[piece][rotation];
            for (let py = 0; py < shape.length; py++) {
                for (let px = 0; px < shape[py].length; px++) {
                    if (shape[py][px]) {
                        const boardX = x + px;
                        const boardY = y + py;
                        
                        if (boardX < 0 || boardX >= BOARD_WIDTH || 
                            boardY >= BOARD_HEIGHT || 
                            (boardY >= 0 && board[boardY][boardX])) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        function placePiece() {
            const piece = PIECES[currentPiece.type][currentPiece.rotation];
            for (let y = 0; y < piece.length; y++) {
                for (let x = 0; x < piece[y].length; x++) {
                    if (piece[y][x]) {
                        const boardX = currentPiece.x + x;
                        const boardY = currentPiece.y + y;
                        if (boardY >= 0) {
                            board[boardY][boardX] = currentPiece.type + 1;
                        }
                    }
                }
            }
        }

        function clearLines() {
            let linesCleared = 0;
            for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {
                if (board[y].every(cell => cell !== 0)) {
                    board.splice(y, 1);
                    board.unshift(new Array(BOARD_WIDTH).fill(0));
                    linesCleared++;
                    y++; // ตรวจสอบแถวเดิมอีกครั้ง
                }
            }
            
            if (linesCleared > 0) {
                lines += linesCleared;
                score += linesCleared * 100 * level;
                level = Math.floor(lines / 10) + 1;
                dropInterval = Math.max(50, 1000 - (level - 1) * 50);
                
                linesElement.textContent = lines;
                scoreElement.textContent = score;
                levelElement.textContent = level;
            }
        }

        function spawnPiece() {
            currentPiece = {
                x: Math.floor(BOARD_WIDTH / 2) - 1,
                y: 0,
                rotation: 0,
                type: Math.floor(Math.random() * PIECES.length)
            };
            
            if (!isValidPosition(currentPiece.type, currentPiece.x, currentPiece.y, currentPiece.rotation)) {
                gameOver();
            }
        }

        function update() {
            if (!gameRunning || isPaused) return;
            
            const now = Date.now();
            if (now - dropTime > dropInterval) {
                if (isValidPosition(currentPiece.type, currentPiece.x, currentPiece.y + 1, currentPiece.rotation)) {
                    currentPiece.y++;
                } else {
                    placePiece();
                    clearLines();
                    spawnPiece();
                }
                dropTime = now;
            }
        }

        function gameOver() {
            gameRunning = false;
            gameOverElement.style.display = 'block';
        }

        function startGame() {
            initBoard();
            score = 0;
            lines = 0;
            level = 1;
            dropInterval = 1000;
            dropTime = Date.now();
            scoreElement.textContent = score;
            linesElement.textContent = lines;
            levelElement.textContent = level;
            gameOverElement.style.display = 'none';
            gameRunning = true;
            isPaused = false;
            spawnPiece();
        }

        // ควบคุมด้วยคีย์บอร์ด
        document.addEventListener('keydown', (e) => {
            if (!gameRunning) return;
            
            switch (e.key) {
                case 'ArrowLeft':
                    if (isValidPosition(currentPiece.type, currentPiece.x - 1, currentPiece.y, currentPiece.rotation)) {
                        currentPiece.x--;
                    }
                    break;
                case 'ArrowRight':
                    if (isValidPosition(currentPiece.type, currentPiece.x + 1, currentPiece.y, currentPiece.rotation)) {
                        currentPiece.x++;
                    }
                    break;
                case 'ArrowDown':
                    if (isValidPosition(currentPiece.type, currentPiece.x, currentPiece.y + 1, currentPiece.rotation)) {
                        currentPiece.y++;
                        score += 1;
                        scoreElement.textContent = score;
                    }
                    break;
                case 'ArrowUp':
                    const newRotation = (currentPiece.rotation + 1) % PIECES[currentPiece.type].length;
                    if (isValidPosition(currentPiece.type, currentPiece.x, currentPiece.y, newRotation)) {
                        currentPiece.rotation = newRotation;
                    }
                    break;
                case ' ':
                    isPaused = !isPaused;
                    break;
            }
        });

        // เริ่มเกม
        startGame();
        
        function gameLoop() {
            update();
            drawBoard();
            requestAnimationFrame(gameLoop);
        }
        
        gameLoop();
    </script>
    <!-- ASHURA:shared-js -->
    <script src="./game-optimization.js"></script>
    <!-- ASHURA:gf-config -->
<script>
  window.GF_CONFIG = {
    showPauseOverlay: true,
    autoMuteOnPause: true,
    quality: 'medium',
    pixelArt: true,
    maxDevicePixelRatio: 1.25,
    resizeDebounceMs: 120,
    debug: false
  };
</script>
<script src="./_assets/game-frame.js"></script>
</body>
</html>