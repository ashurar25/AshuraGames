<!DOCTYPE html>
<html   lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏µ‡∏≠‡∏≠‡∏ô - ASHURA Games</title>
    <!-- ASHURA:shared-css -->
    <link rel="stylesheet" href="./game-enhancement.css">
    <link rel="stylesheet" href="./game-optimization.css">
    <link rel="stylesheet" href="./_assets/game-frame.css">

    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #000428 0%, #004e92 100%);
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            overflow: hidden;
        }
        
        #gameContainer {
            position: relative;
            text-align: center;
            background: rgba(0, 4, 40, 0.3);
            padding: 20px;
            border-radius: 20px;
            box-shadow: 0 0 50px rgba(0, 255, 255, 0.3);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(0, 255, 255, 0.4);
        }
        
        canvas {
            border: 3px solid #00ffff;
            border-radius: 15px;
            box-shadow: 0 0 30px rgba(0, 255, 255, 0.6);
            background: #000020;
        }
        
        #gameUI {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            color: #00ffff;
            font-weight: bold;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.8);
        }
        
        #score, #level, #lives {
            font-size: 18px;
            background: rgba(0, 255, 255, 0.1);
            padding: 8px 15px;
            border-radius: 20px;
            border: 1px solid rgba(0, 255, 255, 0.3);
        }
        
        #gameOver {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: #00ffff;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            display: none;
            border: 2px solid #ff0080;
            z-index: 10;
        }
        
        button {
            background: linear-gradient(45deg, #00ffff, #0080ff);
            border: none;
            color: white;
            padding: 12px 25px;
            font-size: 16px;
            border-radius: 25px;
            cursor: pointer;
            margin: 10px;
            transition: all 0.3s ease;
            font-weight: bold;
        }
        
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.6);
        }
        
        #instructions {
            color: #00ffff;
            margin-top: 15px;
            font-size: 14px;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.8);
            animation: neonPulse 2s infinite;
        }
        
        @keyframes neonPulse {
            0%, 100% { text-shadow: 0 0 10px rgba(0, 255, 255, 0.8); }
            50% { text-shadow: 0 0 20px rgba(0, 255, 255, 1), 0 0 30px rgba(0, 255, 255, 0.8); }
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <div id="gameUI">
            <div id="score">‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: 0</div>
            <div id="level">üåü ‡πÄ‡∏•‡πÄ‡∏ß‡∏•: 1</div>
            <div id="lives">üíô ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: 3</div>
        </div>
        <canvas id="gameCanvas" width="800" height="600"></canvas>
        <div id="gameOver">
            <h2>üéÆ ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!</h2>
            <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: <span id="finalScore">0</span></p>
            <p>‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: <span id="finalLevel">1</span></p>
            <button onclick="restartGame()">üîÑ ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà</button>
        </div>
        <div id="instructions">
            üéØ A/D ‡∏´‡∏£‡∏∑‡∏≠ ‚Üê ‚Üí ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏ô | W ‡∏´‡∏£‡∏∑‡∏≠ ‚Üë ‡∏´‡∏£‡∏∑‡∏≠ Space ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î | ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π!
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        let player = {
            x: 100,
            y: 400,
            width: 20,
            height: 30,
            velocityX: 0,
            velocityY: 0,
            speed: 6,
            jumpPower: 15,
            grounded: false,
            trail: []
        };
        
        let camera = {
            x: 0,
            y: 0
        };
        
        let platforms = [];
        let enemies = [];
        let collectibles = [];
        let particles = [];
        let backgroundParticles = [];
        
        let score = 0;
        let level = 1;
        let lives = 3;
        let gameRunning = false;
        let keys = {};
        
        const gravity = 0.8;
        const levelWidth = 2000;
        
        class Particle {
            constructor(x, y, color, velocity = {x: 0, y: 0}, life = 60) {
                this.x = x;
                this.y = y;
                this.vx = velocity.x + (Math.random() - 0.5) * 8;
                this.vy = velocity.y + (Math.random() - 0.5) * 8;
                this.color = color;
                this.life = life;
                this.maxLife = life;
                this.size = Math.random() * 4 + 1;
            }
            
            update() {
                this.x += this.vx;
                this.y += this.vy;
                this.vx *= 0.98;
                this.vy *= 0.98;
                this.life--;
                return this.life > 0;
            }
            
            draw() {
                const alpha = this.life / this.maxLife;
                ctx.save();
                ctx.globalAlpha = alpha;
                ctx.fillStyle = this.color;
                ctx.shadowBlur = 15;
                ctx.shadowColor = this.color;
                ctx.beginPath();
                ctx.arc(this.x - camera.x, this.y - camera.y, this.size, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            }
        }
        
        class Enemy {
            constructor(x, y, type = 'patrol') {
                this.x = x;
                this.y = y;
                this.width = 25;
                this.height = 25;
                this.type = type;
                this.speed = 2;
                this.direction = 1;
                this.patrolDistance = 100;
                this.startX = x;
                this.health = type === 'strong' ? 2 : 1;
            }
            
            update() {
                if (this.type === 'patrol') {
                    this.x += this.speed * this.direction;
                    
                    if (this.x > this.startX + this.patrolDistance || this.x < this.startX) {
                        this.direction *= -1;
                    }
                } else if (this.type === 'follow') {
                    const dx = player.x - this.x;
                    if (Math.abs(dx) < 300) {
                        this.x += dx > 0 ? this.speed * 0.5 : -this.speed * 0.5;
                    }
                }
                
                // Create enemy trail
                if (Math.random() < 0.3) {
                    particles.push(new Particle(
                        this.x + this.width/2, 
                        this.y + this.height/2, 
                        '#ff0080', 
                        {x: 0, y: 0}, 
                        30
                    ));
                }
            }
            
            draw() {
                const colors = {
                    patrol: '#ff0080',
                    follow: '#ff4000',
                    strong: '#8000ff'
                };
                
                ctx.fillStyle = colors[this.type];
                ctx.shadowBlur = 15;
                ctx.shadowColor = colors[this.type];
                
                // Draw diamond shape enemy
                ctx.beginPath();
                ctx.moveTo(this.x + this.width/2 - camera.x, this.y - camera.y);
                ctx.lineTo(this.x + this.width - camera.x, this.y + this.height/2 - camera.y);
                ctx.lineTo(this.x + this.width/2 - camera.x, this.y + this.height - camera.y);
                ctx.lineTo(this.x - camera.x, this.y + this.height/2 - camera.y);
                ctx.closePath();
                ctx.fill();
                
                ctx.shadowBlur = 0;
            }
        }
        
        class Collectible {
            constructor(x, y, type = 'gem') {
                this.x = x;
                this.y = y;
                this.width = 15;
                this.height = 15;
                this.type = type;
                this.rotation = 0;
                this.collected = false;
                this.value = type === 'special' ? 500 : 100;
            }
            
            update() {
                this.rotation += 0.1;
                
                // Floating animation
                this.y += Math.sin(Date.now() * 0.005 + this.x * 0.01) * 0.5;
                
                // Create sparkle particles
                if (Math.random() < 0.1) {
                    particles.push(new Particle(
                        this.x + this.width/2, 
                        this.y + this.height/2, 
                        this.type === 'special' ? '#ffff00' : '#00ffff', 
                        {x: 0, y: -1}, 
                        40
                    ));
                }
            }
            
            draw() {
                if (this.collected) return;
                
                ctx.save();
                ctx.translate(this.x + this.width/2 - camera.x, this.y + this.height/2 - camera.y);
                ctx.rotate(this.rotation);
                
                const color = this.type === 'special' ? '#ffff00' : '#00ffff';
                ctx.fillStyle = color;
                ctx.shadowBlur = 20;
                ctx.shadowColor = color;
                
                // Draw star shape
                ctx.beginPath();
                for (let i = 0; i < 6; i++) {
                    const angle = (i * Math.PI * 2) / 6;
                    const x = Math.cos(angle) * (this.width/2);
                    const y = Math.sin(angle) * (this.height/2);
                    if (i === 0) ctx.moveTo(x, y);
                    else ctx.lineTo(x, y);
                }
                ctx.closePath();
                ctx.fill();
                
                ctx.restore();
            }
        }
        
        function generateLevel() {
            platforms = [];
            enemies = [];
            collectibles = [];
            
            // Ground platforms
            for (let x = 0; x < levelWidth; x += 100) {
                platforms.push({
                    x: x,
                    y: canvas.height - 40,
                    width: 100,
                    height: 40,
                    type: 'ground'
                });
            }
            
            // Floating platforms
            const platformCount = 15 + level * 3;
            for (let i = 0; i < platformCount; i++) {
                platforms.push({
                    x: 200 + i * (levelWidth / platformCount) + Math.random() * 100,
                    y: 300 + Math.random() * 200,
                    width: 80 + Math.random() * 40,
                    height: 20,
                    type: 'platform'
                });
            }
            
            // Enemies
            const enemyCount = 8 + level * 2;
            for (let i = 0; i < enemyCount; i++) {
                const types = ['patrol', 'follow', 'strong'];
                const type = types[Math.floor(Math.random() * types.length)];
                enemies.push(new Enemy(
                    300 + Math.random() * (levelWidth - 600),
                    200 + Math.random() * 200,
                    type
                ));
            }
            
            // Collectibles
            const collectibleCount = 20 + level * 5;
            for (let i = 0; i < collectibleCount; i++) {
                const type = Math.random() < 0.2 ? 'special' : 'gem';
                collectibles.push(new Collectible(
                    200 + Math.random() * (levelWidth - 400),
                    100 + Math.random() * 300,
                    type
                ));
            }
        }
        
        function createBackgroundParticles() {
            backgroundParticles = [];
            for (let i = 0; i < 50; i++) {
                backgroundParticles.push({
                    x: Math.random() * levelWidth,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 2 + 1,
                    speed: Math.random() * 0.5 + 0.2,
                    color: `hsl(${180 + Math.random() * 60}, 100%, 70%)`
                });
            }
        }
        
        function drawBackground() {
            // Gradient background
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#000428');
            gradient.addColorStop(0.5, '#004e92');
            gradient.addColorStop(1, '#000020');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Animated background particles
            backgroundParticles.forEach(particle => {
                particle.x -= particle.speed;
                if (particle.x < -camera.x - 10) {
                    particle.x = levelWidth - camera.x + 10;
                }
                
                ctx.fillStyle = particle.color;
                ctx.shadowBlur = 10;
                ctx.shadowColor = particle.color;
                ctx.beginPath();
                ctx.arc(particle.x - camera.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fill();
            });
            
            ctx.shadowBlur = 0;
        }
        
        function drawPlatforms() {
            platforms.forEach(platform => {
                const gradient = ctx.createLinearGradient(
                    platform.x - camera.x, platform.y - camera.y,
                    platform.x - camera.x, platform.y + platform.height - camera.y
                );
                
                if (platform.type === 'ground') {
                    gradient.addColorStop(0, '#00ffff');
                    gradient.addColorStop(1, '#0080ff');
                } else {
                    gradient.addColorStop(0, '#ff00ff');
                    gradient.addColorStop(1, '#8000ff');
                }
                
                ctx.fillStyle = gradient;
                ctx.shadowBlur = 10;
                ctx.shadowColor = platform.type === 'ground' ? '#00ffff' : '#ff00ff';
                
                ctx.fillRect(
                    platform.x - camera.x,
                    platform.y - camera.y,
                    platform.width,
                    platform.height
                );
                
                // Platform edge glow
                ctx.strokeStyle = platform.type === 'ground' ? '#ffffff' : '#ffff00';
                ctx.lineWidth = 2;
                ctx.strokeRect(
                    platform.x - camera.x,
                    platform.y - camera.y,
                    platform.width,
                    platform.height
                );
            });
            
            ctx.shadowBlur = 0;
        }
        
        function drawPlayer() {
            // Player trail
            player.trail.push({x: player.x + player.width/2, y: player.y + player.height/2, life: 20});
            player.trail = player.trail.filter(point => point.life > 0);
            
            player.trail.forEach((point, index) => {
                point.life--;
                const alpha = point.life / 20;
                ctx.save();
                ctx.globalAlpha = alpha;
                ctx.fillStyle = '#00ffff';
                ctx.shadowBlur = 5;
                ctx.shadowColor = '#00ffff';
                ctx.beginPath();
                ctx.arc(point.x - camera.x, point.y - camera.y, 3, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            });
            
            // Player body
            const gradient = ctx.createRadialGradient(
                player.x + player.width/2 - camera.x, player.y + player.height/2 - camera.y, 0,
                player.x + player.width/2 - camera.x, player.y + player.height/2 - camera.y, player.width
            );
            gradient.addColorStop(0, '#ffffff');
            gradient.addColorStop(1, '#00ffff');
            
            ctx.fillStyle = gradient;
            ctx.shadowBlur = 20;
            ctx.shadowColor = '#00ffff';
            
            // Draw player as a glowing rectangle
            ctx.fillRect(
                player.x - camera.x,
                player.y - camera.y,
                player.width,
                player.height
            );
            
            // Player outline
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 2;
            ctx.strokeRect(
                player.x - camera.x,
                player.y - camera.y,
                player.width,
                player.height
            );
            
            ctx.shadowBlur = 0;
        }
        
        function updatePlayer() {
            // Horizontal movement
            if (keys['a'] || keys['ArrowLeft']) {
                player.velocityX = -player.speed;
            } else if (keys['d'] || keys['ArrowRight']) {
                player.velocityX = player.speed;
            } else {
                player.velocityX *= 0.8; // Friction
            }
            
            // Jumping
            if ((keys['w'] || keys['ArrowUp'] || keys[' ']) && player.grounded) {
                player.velocityY = -player.jumpPower;
                player.grounded = false;
                
                // Jump particles
                for (let i = 0; i < 10; i++) {
                    particles.push(new Particle(
                        player.x + player.width/2,
                        player.y + player.height,
                        '#00ffff',
                        {x: (Math.random() - 0.5) * 4, y: Math.random() * 2}
                    ));
                }
            }
            
            // Apply gravity
            player.velocityY += gravity;
            
            // Update position
            player.x += player.velocityX;
            player.y += player.velocityY;
            
            // Platform collision
            player.grounded = false;
            platforms.forEach(platform => {
                if (player.x < platform.x + platform.width &&
                    player.x + player.width > platform.x &&
                    player.y < platform.y + platform.height &&
                    player.y + player.height > platform.y) {
                    
                    // Top collision (landing)
                    if (player.velocityY > 0 && player.y < platform.y) {
                        player.y = platform.y - player.height;
                        player.velocityY = 0;
                        player.grounded = true;
                    }
                }
            });
            
            // World boundaries
            if (player.x < 0) player.x = 0;
            if (player.x > levelWidth - player.width) player.x = levelWidth - player.width;
            
            // Fall off screen
            if (player.y > canvas.height + 100) {
                lives--;
                respawnPlayer();
            }
            
            // Update camera
            camera.x = player.x - canvas.width / 2;
            camera.x = Math.max(0, Math.min(levelWidth - canvas.width, camera.x));
        }
        
        function respawnPlayer() {
            player.x = 100;
            player.y = 400;
            player.velocityX = 0;
            player.velocityY = 0;
            
            if (lives <= 0) {
                gameOver();
            } else {
                updateUI();
            }
        }
        
        function updateGame() {
            if (!gameRunning) return;
            
            updatePlayer();
            
            // Update enemies
            enemies.forEach(enemy => {
                enemy.update();
                
                // Enemy collision with player
                if (player.x < enemy.x + enemy.width &&
                    player.x + player.width > enemy.x &&
                    player.y < enemy.y + enemy.height &&
                    player.y + player.height > enemy.y) {
                    
                    lives--;
                    
                    // Damage particles
                    for (let i = 0; i < 20; i++) {
                        particles.push(new Particle(
                            player.x + player.width/2,
                            player.y + player.height/2,
                            '#ff0000',
                            {x: (Math.random() - 0.5) * 8, y: (Math.random() - 0.5) * 8}
                        ));
                    }
                    
                    respawnPlayer();
                }
            });
            
            // Update collectibles
            collectibles.forEach(collectible => {
                if (!collectible.collected) {
                    collectible.update();
                    
                    // Collectible collision with player
                    if (player.x < collectible.x + collectible.width &&
                        player.x + player.width > collectible.x &&
                        player.y < collectible.y + collectible.height &&
                        player.y + player.height > collectible.y) {
                        
                        collectible.collected = true;
                        score += collectible.value;
                        
                        // Collection particles
                        for (let i = 0; i < 15; i++) {
                            particles.push(new Particle(
                                collectible.x + collectible.width/2,
                                collectible.y + collectible.height/2,
                                collectible.type === 'special' ? '#ffff00' : '#00ffff',
                                {x: (Math.random() - 0.5) * 6, y: (Math.random() - 0.5) * 6}
                            ));
                        }
                        
                        updateUI();
                    }
                }
            });
            
            // Update particles
            particles = particles.filter(particle => {
                particle.update();
                particle.draw();
                return particle.life > 0;
            });
            
            // Check level completion
            if (collectibles.every(c => c.collected)) {
                nextLevel();
            }
        }
        
        function nextLevel() {
            level++;
            score += 1000 * level;
            player.x = 100;
            player.y = 400;
            player.velocityX = 0;
            player.velocityY = 0;
            
            generateLevel();
            updateUI();
            
            // Level up effect
            for (let i = 0; i < 50; i++) {
                particles.push(new Particle(
                    player.x + player.width/2,
                    player.y + player.height/2,
                    '#ffff00',
                    {x: (Math.random() - 0.5) * 10, y: (Math.random() - 0.5) * 10},
                    80
                ));
            }
        }
        
        function updateUI() {
            document.getElementById('score').textContent = '‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ' + score;
            document.getElementById('level').textContent = 'üåü ‡πÄ‡∏•‡πÄ‡∏ß‡∏•: ' + level;
            document.getElementById('lives').textContent = 'üíô ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: ' + lives;
        }
        
        function gameLoop() {
            drawBackground();
            drawPlatforms();
            updateGame();
            
            // Draw collectibles
            collectibles.forEach(collectible => collectible.draw());
            
            // Draw enemies
            enemies.forEach(enemy => enemy.draw());
            
            drawPlayer();
            
            if (gameRunning) {
                requestAnimationFrame(gameLoop);
            }
        }
        
        function gameOver() {
            gameRunning = false;
            document.getElementById('finalScore').textContent = score;
            document.getElementById('finalLevel').textContent = level;
            document.getElementById('gameOver').style.display = 'block';
        }
        
        function restartGame() {
            player.x = 100;
            player.y = 400;
            player.velocityX = 0;
            player.velocityY = 0;
            player.trail = [];
            
            score = 0;
            level = 1;
            lives = 3;
            particles = [];
            gameRunning = true;
            
            generateLevel();
            createBackgroundParticles();
            updateUI();
            document.getElementById('gameOver').style.display = 'none';
            
            requestAnimationFrame(gameLoop);
        }
        
        // Input handling
        document.addEventListener('keydown', (e) => {
            keys[e.key.toLowerCase()] = true;
            
            if (e.key === ' ') {
                e.preventDefault();
            }
        });
        
        document.addEventListener('keyup', (e) => {
            keys[e.key.toLowerCase()] = false;
        });
        
        // Touch controls for mobile
        let touchStartX = 0;
        let touchStartY = 0;
        
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        });
        
        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (!gameRunning) return;
            
            const touch = e.touches[0];
            const deltaX = touch.clientX - touchStartX;
            
            if (Math.abs(deltaX) > 20) {
                if (deltaX > 0) {
                    keys['d'] = true;
                    keys['a'] = false;
                } else {
                    keys['a'] = true;
                    keys['d'] = false;
                }
            } else {
                keys['a'] = false;
                keys['d'] = false;
            }
        });
        
        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            
            // Jump on tap
            if (gameRunning && player.grounded) {
                player.velocityY = -player.jumpPower;
                player.grounded = false;
            }
            
            keys['a'] = false;
            keys['d'] = false;
        });
        
        // Start game
        restartGame();
    </script>
    <!-- ASHURA:shared-js -->
    <script src="./game-optimization.js"></script>
    <!-- ASHURA:gf-config -->
<script>
  window.GF_CONFIG = {
    showPauseOverlay: true,
    autoMuteOnPause: true,
    quality: 'medium',
    maxDevicePixelRatio: 1.5,
    resizeDebounceMs: 180,
    autoPauseOnHide: true,
    hints: true,
    debug: false
  };
</script>
<script src="./_assets/game-frame.js"></script>
</body>
</html>