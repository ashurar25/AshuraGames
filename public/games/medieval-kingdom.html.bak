<!DOCTYPE html>
<html   lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏≠‡∏≤‡∏ì‡∏≤‡∏à‡∏±‡∏Å‡∏£‡∏°‡∏´‡∏≤‡∏Å‡∏©‡∏±‡∏ï‡∏£‡∏¥‡∏¢‡πå - ASHURA Games</title>
    <!-- ASHURA:shared-css -->
    <link rel="stylesheet" href="./game-enhancement.css">
    <link rel="stylesheet" href="./game-optimization.css">
    <link rel="stylesheet" href="./_assets/game-frame.css">

    <style>
        body {
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #4a5568, #2d3748);
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: white;
        }
        .game-container {
            text-align: center;
            background: rgba(0,0,0,0.4);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #d69e2e;
            box-shadow: 0 0 30px rgba(214,158,46,0.4);
            max-width: 900px;
        }
        canvas {
            border: 3px solid #d69e2e;
            background: linear-gradient(to bottom, #68d391 0%, #38a169 40%, #2f855a 100%);
            border-radius: 10px;
            cursor: pointer;
        }
        .ui-panel {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
            text-align: left;
        }
        .resource-panel {
            background: rgba(214,158,46,0.2);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #d69e2e;
        }
        .resource-item {
            display: flex;
            justify-content: space-between;
            margin: 5px 0;
            font-size: 14px;
        }
        .building-panel {
            background: rgba(74,85,104,0.3);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #718096;
        }
        .build-button {
            width: 100%;
            padding: 8px;
            margin: 3px 0;
            background: linear-gradient(45deg, #d69e2e, #b7791f);
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
        }
        .build-button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 10px rgba(214,158,46,0.5);
        }
        .build-button:disabled {
            background: #666;
            cursor: not-allowed;
            transform: none;
        }
        .army-panel {
            background: rgba(220,38,38,0.2);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #dc2626;
        }
        .controls {
            margin-top: 15px;
            font-size: 14px;
            opacity: 0.8;
        }
        .turn-counter {
            font-size: 20px;
            color: #d69e2e;
            margin-bottom: 15px;
            font-weight: bold;
        }
        button {
            padding: 10px 20px;
            font-size: 14px;
            background: linear-gradient(45deg, #d69e2e, #b7791f);
            border: none;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            margin: 5px;
            transition: all 0.3s ease;
        }
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 15px rgba(214,158,46,0.5);
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="turn-counter">‡∏õ‡∏µ <span id="turn">1</span> - ‡∏≠‡∏≤‡∏ì‡∏≤‡∏à‡∏±‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>
        
        <div class="ui-panel">
            <div class="resource-panel">
                <h3>üèõÔ∏è ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£</h3>
                <div class="resource-item">
                    <span>ü•á ‡∏ó‡∏≠‡∏á:</span>
                    <span id="gold">1000</span>
                </div>
                <div class="resource-item">
                    <span>üåæ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£:</span>
                    <span id="food">500</span>
                </div>
                <div class="resource-item">
                    <span>üè† ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£:</span>
                    <span id="population">100</span>
                </div>
                <div class="resource-item">
                    <span>‚öîÔ∏è ‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û:</span>
                    <span id="army">50</span>
                </div>
            </div>

            <div class="building-panel">
                <h3>üèóÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á</h3>
                <button class="build-button" onclick="buildStructure('farm')" id="buildFarm">
                    üåæ ‡∏ü‡∏≤‡∏£‡πå‡∏° (100ü•á)
                </button>
                <button class="build-button" onclick="buildStructure('house')" id="buildHouse">
                    üè† ‡∏ö‡πâ‡∏≤‡∏ô (150ü•á)
                </button>
                <button class="build-button" onclick="buildStructure('barracks')" id="buildBarracks">
                    üèõÔ∏è ‡∏Ñ‡πà‡∏≤‡∏¢ (300ü•á)
                </button>
                <button class="build-button" onclick="buildStructure('wall')" id="buildWall">
                    üõ°Ô∏è ‡∏Å‡∏≥‡πÅ‡∏û‡∏á (250ü•á)
                </button>
                <button class="build-button" onclick="buildStructure('castle')" id="buildCastle">
                    üè∞ ‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó (1000ü•á)
                </button>
            </div>

            <div class="army-panel">
                <h3>‚öîÔ∏è ‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û</h3>
                <button class="build-button" onclick="recruitSoldiers()" id="recruitBtn">
                    ‚öîÔ∏è ‡∏£‡∏±‡∏ö‡∏ó‡∏´‡∏≤‡∏£ (50ü•á/10)
                </button>
                <button class="build-button" onclick="launchAttack()" id="attackBtn">
                    ‚öîÔ∏è ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏®‡∏±‡∏ï‡∏£‡∏π
                </button>
                <div class="resource-item">
                    <span>üõ°Ô∏è ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô:</span>
                    <span id="defense">10</span>
                </div>
                <div class="resource-item">
                    <span>üíÄ ‡∏®‡∏±‡∏ï‡∏£‡∏π:</span>
                    <span id="enemyArmy">30</span>
                </div>
            </div>
        </div>

        <canvas id="gameCanvas" width="800" height="400"></canvas>
        
        <div style="margin: 15px 0;">
            <button onclick="nextTurn()">‚è≠Ô∏è ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
            <button onclick="autoPlay()" id="autoBtn">‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</button>
            <button onclick="newGame()">üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà</button>
        </div>
        
        <div class="controls">
            ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£ ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏´‡∏≤‡∏£
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        let gameState = {
            turn: 1,
            gold: 1000,
            food: 500,
            population: 100,
            army: 50,
            defense: 10,
            enemyArmy: 30,
            buildings: [],
            selectedBuilding: null,
            autoPlaying: false
        };
        
        const buildingTypes = {
            farm: { cost: 100, icon: 'üåæ', size: 30, goldPerTurn: 0, foodPerTurn: 20 },
            house: { cost: 150, icon: 'üè†', size: 25, populationIncrease: 20 },
            barracks: { cost: 300, icon: 'üèõÔ∏è', size: 40, armyPerTurn: 5 },
            wall: { cost: 250, icon: 'üõ°Ô∏è', size: 20, defenseIncrease: 15 },
            castle: { cost: 1000, icon: 'üè∞', size: 60, goldPerTurn: 50, defenseIncrease: 30 }
        };
        
        function drawMap() {
            // Background gradient
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#68d391');
            gradient.addColorStop(0.4, '#38a169');
            gradient.addColorStop(1, '#2f855a');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid
            ctx.strokeStyle = 'rgba(255,255,255,0.1)';
            ctx.lineWidth = 1;
            for (let x = 0; x < canvas.width; x += 50) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            for (let y = 0; y < canvas.height; y += 50) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
            
            // Draw buildings
            gameState.buildings.forEach((building, index) => {
                const type = buildingTypes[building.type];
                
                // Building shadow
                ctx.fillStyle = 'rgba(0,0,0,0.3)';
                ctx.fillRect(building.x + 3, building.y + 3, type.size, type.size);
                
                // Building background
                ctx.fillStyle = building === gameState.selectedBuilding ? 
                    'rgba(255,255,0,0.8)' : 'rgba(139,69,19,0.8)';
                ctx.fillRect(building.x, building.y, type.size, type.size);
                
                // Building border
                ctx.strokeStyle = '#654321';
                ctx.lineWidth = 2;
                ctx.strokeRect(building.x, building.y, type.size, type.size);
                
                // Building icon
                ctx.font = `${type.size * 0.6}px Arial`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillStyle = 'white';
                ctx.fillText(type.icon, 
                           building.x + type.size/2, 
                           building.y + type.size/2);
                
                // Building level indicator
                if (building.level > 1) {
                    ctx.font = '12px Arial';
                    ctx.fillStyle = '#ffd700';
                    ctx.fillText(`L${building.level}`, 
                               building.x + type.size - 10, building.y + 10);
                }
            });
            
            // Draw mountains (enemies)
            for (let i = 0; i < 3; i++) {
                const x = 600 + i * 60;
                const y = 50 + i * 100;
                
                ctx.fillStyle = '#4a5568';
                ctx.beginPath();
                ctx.moveTo(x, y + 80);
                ctx.lineTo(x + 40, y);
                ctx.lineTo(x + 80, y + 80);
                ctx.closePath();
                ctx.fill();
                
                // Enemy flag
                ctx.fillStyle = '#dc2626';
                ctx.fillRect(x + 35, y - 10, 10, 15);
                ctx.font = '20px Arial';
                ctx.fillText('üíÄ', x + 30, y + 40);
            }
            
            // Draw river
            ctx.strokeStyle = '#3182ce';
            ctx.lineWidth = 8;
            ctx.beginPath();
            ctx.moveTo(200, 0);
            ctx.quadraticCurveTo(300, 200, 400, 400);
            ctx.stroke();
            
            // River sparkles
            for (let i = 0; i < 10; i++) {
                const t = i / 10;
                const x = 200 + t * 100 + Math.sin(Date.now() * 0.005 + i) * 20;
                const y = t * 400 + Math.cos(Date.now() * 0.005 + i) * 50;
                
                ctx.fillStyle = 'rgba(255,255,255,0.8)';
                ctx.beginPath();
                ctx.arc(x, y, 2, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        
        function buildStructure(type) {
            const cost = buildingTypes[type].cost;
            if (gameState.gold < cost) {
                alert('‡∏ó‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠!');
                return;
            }
            
            gameState.selectedBuilding = type;
            canvas.style.cursor = 'crosshair';
            alert(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${buildingTypes[type].icon} ${type}`);
        }
        
        function placeBuilding(x, y, type) {
            const size = buildingTypes[type].size;
            
            // Check for overlaps
            const overlap = gameState.buildings.some(building => {
                const bType = buildingTypes[building.type];
                return x < building.x + bType.size && 
                       x + size > building.x && 
                       y < building.y + bType.size && 
                       y + size > building.y;
            });
            
            if (overlap) {
                alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!');
                return false;
            }
            
            // Deduct cost
            gameState.gold -= buildingTypes[type].cost;
            
            // Add building
            gameState.buildings.push({
                type: type,
                x: x,
                y: y,
                level: 1,
                built: gameState.turn
            });
            
            gameState.selectedBuilding = null;
            canvas.style.cursor = 'pointer';
            updateDisplay();
            return true;
        }
        
        function recruitSoldiers() {
            const cost = 50;
            if (gameState.gold < cost) {
                alert('‡∏ó‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠!');
                return;
            }
            
            gameState.gold -= cost;
            gameState.army += 10;
            updateDisplay();
        }
        
        function launchAttack() {
            if (gameState.army < 20) {
                alert('‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏≠! ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏Ñ‡∏ô');
                return;
            }
            
            const enemyPower = gameState.enemyArmy;
            const playerPower = gameState.army + gameState.defense;
            
            const battleResult = Math.random() * playerPower > Math.random() * enemyPower;
            
            if (battleResult) {
                const loot = Math.floor(gameState.enemyArmy * 10 + Math.random() * 200);
                gameState.gold += loot;
                gameState.army -= Math.floor(gameState.army * 0.2); // Casualties
                gameState.enemyArmy = Math.floor(gameState.enemyArmy * 0.8);
                alert(`‡∏ä‡∏ô‡∏∞! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á ${loot} ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û‡∏®‡∏±‡∏ï‡∏£‡∏π`);
            } else {
                gameState.army -= Math.floor(gameState.army * 0.4);
                alert('‡πÅ‡∏û‡πâ! ‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏ó‡∏´‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å');
            }
            
            updateDisplay();
        }
        
        function nextTurn() {
            gameState.turn++;
            
            // Generate resources
            let goldIncome = 50; // Base income
            let foodIncome = 10;
            let armyIncome = 0;
            
            gameState.buildings.forEach(building => {
                const type = buildingTypes[building.type];
                if (type.goldPerTurn) goldIncome += type.goldPerTurn * building.level;
                if (type.foodPerTurn) foodIncome += type.foodPerTurn * building.level;
                if (type.armyPerTurn) armyIncome += type.armyPerTurn * building.level;
                if (type.populationIncrease && building.built === gameState.turn - 1) {
                    gameState.population += type.populationIncrease;
                }
                if (type.defenseIncrease && building.built === gameState.turn - 1) {
                    gameState.defense += type.defenseIncrease;
                }
            });
            
            gameState.gold += goldIncome;
            gameState.food += foodIncome;
            gameState.army += armyIncome;
            
            // Consume food
            const foodConsumption = Math.floor(gameState.population / 10);
            gameState.food -= foodConsumption;
            if (gameState.food < 0) {
                gameState.population -= Math.abs(gameState.food);
                gameState.food = 0;
            }
            
            // Enemy grows
            gameState.enemyArmy += Math.floor(Math.random() * 5) + gameState.turn;
            
            // Random events
            if (Math.random() < 0.2) {
                const events = [
                    { text: 'üéâ ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß! +200 ‡∏≠‡∏≤‡∏´‡∏≤‡∏£', food: 200 },
                    { text: 'üí∞ ‡∏û‡∏ö‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥! +300 ‡∏ó‡∏≠‡∏á', gold: 300 },
                    { text: '‚öîÔ∏è ‡∏ó‡∏´‡∏≤‡∏£‡∏≠‡∏≤‡∏™‡∏≤! +15 ‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û', army: 15 },
                    { text: 'üå™Ô∏è ‡∏û‡∏≤‡∏¢‡∏∏! -100 ‡∏ó‡∏≠‡∏á', gold: -100 }
                ];
                
                const event = events[Math.floor(Math.random() * events.length)];
                alert(event.text);
                
                if (event.gold) gameState.gold += event.gold;
                if (event.food) gameState.food += event.food;
                if (event.army) gameState.army += event.army;
            }
            
            updateDisplay();
            updateButtonStates();
            
            if (gameState.autoPlaying) {
                setTimeout(() => {
                    if (gameState.autoPlaying) nextTurn();
                }, 2000);
            }
        }
        
        function updateDisplay() {
            document.getElementById('turn').textContent = gameState.turn;
            document.getElementById('gold').textContent = gameState.gold;
            document.getElementById('food').textContent = gameState.food;
            document.getElementById('population').textContent = gameState.population;
            document.getElementById('army').textContent = gameState.army;
            document.getElementById('defense').textContent = gameState.defense;
            document.getElementById('enemyArmy').textContent = gameState.enemyArmy;
        }
        
        function updateButtonStates() {
            Object.keys(buildingTypes).forEach(type => {
                const button = document.getElementById(`build${type.charAt(0).toUpperCase() + type.slice(1)}`);
                if (button) {
                    button.disabled = gameState.gold < buildingTypes[type].cost;
                }
            });
            
            document.getElementById('recruitBtn').disabled = gameState.gold < 50;
        }
        
        function autoPlay() {
            gameState.autoPlaying = !gameState.autoPlaying;
            const btn = document.getElementById('autoBtn');
            btn.textContent = gameState.autoPlaying ? '‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î' : '‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥';
            
            if (gameState.autoPlaying) {
                nextTurn();
            }
        }
        
        function newGame() {
            gameState = {
                turn: 1,
                gold: 1000,
                food: 500,
                population: 100,
                army: 50,
                defense: 10,
                enemyArmy: 30,
                buildings: [],
                selectedBuilding: null,
                autoPlaying: false
            };
            
            // Add starting castle
            gameState.buildings.push({
                type: 'castle',
                x: 50,
                y: 50,
                level: 1,
                built: 0
            });
            
            updateDisplay();
            updateButtonStates();
        }
        
        function gameLoop() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawMap();
            requestAnimationFrame(gameLoop);
        }
        
        // Mouse controls
        canvas.addEventListener('click', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            if (gameState.selectedBuilding) {
                placeBuilding(x - buildingTypes[gameState.selectedBuilding].size/2, 
                             y - buildingTypes[gameState.selectedBuilding].size/2, 
                             gameState.selectedBuilding);
            } else {
                // Select building
                gameState.selectedBuilding = gameState.buildings.find(building => {
                    const type = buildingTypes[building.type];
                    return x >= building.x && x <= building.x + type.size &&
                           y >= building.y && y <= building.y + type.size;
                });
            }
        });
        
        // Start game
        newGame();
        gameLoop();
    </script>
    <!-- ASHURA:shared-js -->
    <script src="./game-optimization.js"></script>
    <!-- ASHURA:gf-config -->
<script>
  window.GF_CONFIG = {
    showPauseOverlay: true,
    autoMuteOnPause: true,
    quality: 'high',
    resizeDebounceMs: 150,
    debug: false
  };
</script>
<script src="./_assets/game-frame.js"></script>
</body>
</html>